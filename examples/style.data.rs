////////////////////////////////////////////////////////////////////////////////
// 🚨🚨🚨🚨🚨🚨🚨🚨 This file is @generated by build script. 🚨🚨🚨🚨🚨🚨🚨🚨 //
// 🚧🚧🚧🚧🚧🚧🚧🚧           ⛔ DO NOT MODIFY! ⛔           🚧🚧🚧🚧🚧🚧🚧🚧 //
////////////////////////////////////////////////////////////////////////////////

const PART_0 : & 'static str = "┌──┬───────────────────────────────────────────────────────────────────────────────────────────────┐\n│ 1│ // Styling utilities.                                                                         │\n│ 2│ //                                                                                            │\n│ 3│ // This module contains utilities                                                             │\n│ 4│ // to work with terminal CSIs and styled types.                                               │\n│ 5│                                                                                               │\n│ 6│ println!(                                                                                     │\n│ 7│     \"{on_black}{green}{blink}{weight}Styling utilities.{reset_blink}                          │\n│ 8│                                                                                               │\n│ 9│ {blue}{slant}This module contains utilities                                                   │\n│10│ to work with terminal CSIs and styled types.{reset}\",                                         │\n│11│     on_black = Background(Rgb(0, 0, 0)),                                                      │\n│12│     green = Foreground(Green),                                                                │\n│13│     blue = Foreground(Blue),                                                                  │\n│14│     blink = Fast,                                                                             │\n│15│     reset_blink = ResetBlink,                                                                 │\n│16│     weight = Bold,                                                                            │\n│17│     slant = Italic,                                                                           │\n│18│     reset = Reset,                                                                            │\n│19│ );                                                                                            │\n└──┴───────────────────────────────────────────────────────────────────────────────────────────────┘" ;

const PART_1 : & 'static str = "\n┌──┬───────────────────────────────────────────────────────────────────────────────────────────────┐\n│ 1│ // > Heads up!                                                                                │\n│ 2│ //                                                                                            │\n│ 3│ // This doc is generated from the `style` example.                                            │\n│ 4│ // Run it to print the code blocks along with the comments!                                   │\n│ 5│ //                                                                                            │\n│ 6│ // $ `clear; cargo run --quiet --example style`                                               │\n└──┴───────────────────────────────────────────────────────────────────────────────────────────────┘" ;

const PART_2 : & 'static str = "\n┌──┬───────────────────────────────────────────────────────────────────────────────────────────────┐\n│ 1│ // # Colors and attributes                                                                    │\n│ 2│ //                                                                                            │\n│ 3│ // You can use the following types to print CSIs to the terminal:                             │\n│ 4│ // - Colors (tuple structs):                                                                  │\n│ 5│ //   - `Foreground`: `Foreground(Color)`                                                      │\n│ 6│ //   - `Background`: `Background(Color)`                                                      │\n│ 7│ // - Attributes (enums):                                                                      │\n│ 8│ //   - `Weight`: `Bold`, `Light`, `ResetWeight`                                               │\n│ 9│ //   - `Slant`: `Italic`, `ResetSlant`                                                        │\n│10│ //   - `Blink`: `Slow`, `Fast`, `ResetBlink`                                                  │\n│11│ //   - `Invert`: `Inverted`, `ResetInvert`                                                    │\n│12│ //   - `Strike`: `Striked`, `ResetStrike`                                                     │\n│13│ //   - `Underline`: `Underlined`, `ResetUnderline`                                            │\n│14│ //   - `Overline`: `Overlined`, `ResetOverline`                                               │\n│15│ //   - `Border`: `Frame`, `Circle`, `ResetBorder`                                             │\n│16│ //                                                                                            │\n│17│ // All those types `Default` to their reset value: colors default to the user's               │\n│18│ // terminal default foreground/background color, attributes default to the                    │\n│19│ // unsetting CSI.                                                                             │\n│20│ //                                                                                            │\n│21│ // They `Display` the CSI they represent. Some basic examples:                                │\n│22│ println!(\"{}Red.{} Not red.\", Foreground(Red), Foreground(ResetColor));                       │\n│23│ println!(                                                                                     │\n│24│     \"{}On Green{}. Not on green.\",                                                            │\n│25│     Background(Green),                                                                        │\n│26│     Background(ResetColor)                                                                    │\n│27│ );                                                                                            │\n│28│ println!(\"{}Bold{}. Not bold.\", Bold, ResetWeight);                                           │\n│29│                                                                                               │\n│30│ // Note that the `Color` enum does not `Display` by itself.                                   │\n│31│ //                                                                                            │\n│32│ // In addition, we provide the `Reset` type which represents the CSI                          │\n│33│ // to reset all colors/attributes:                                                            │\n│34│ println!(                                                                                     │\n│35│     \"{}{}{}Multiple attributes, one reset.{} Not styled.\",                                    │\n│36│     Foreground(Red),                                                                          │\n│37│     Background(Green),                                                                        │\n│38│     Bold,                                                                                     │\n│39│     Reset                                                                                     │\n│40│ );                                                                                            │\n└──┴───────────────────────────────────────────────────────────────────────────────────────────────┘" ;

const PART_3 : & 'static str = "\n┌──┬───────────────────────────────────────────────────────────────────────────────────────────────┐\n│ 1│ // Easy, right?                                                                               │\n└──┴───────────────────────────────────────────────────────────────────────────────────────────────┘" ;

const PART_4 : & 'static str = "\n┌──┬───────────────────────────────────────────────────────────────────────────────────────────────┐\n│ 1│ // # Styling                                                                                  │\n│ 2│ //                                                                                            │\n│ 3│ // (We will refer to both colors and attributes as 'attributes'.)                             │\n│ 4│ //                                                                                            │\n│ 5│ // We want to individually wrap styling attributes with `Option`s to                          │\n│ 6│ // convey ideas such as 'undefined' (display no CSI) or                                       │\n│ 7│ // 'inherit' (inherit from some parent attribute, if any).                                    │\n└──┴───────────────────────────────────────────────────────────────────────────────────────────────┘" ;

const PART_5 : & 'static str = "\n┌──┬───────────────────────────────────────────────────────────────────────────────────────────────┐\n│ 1│ // ## `Styler`                                                                                │\n│ 2│ //                                                                                            │\n│ 3│ // The [`crate::Styler`] trait is at the heart of styles. It defines getters                  │\n│ 4│ // and setters for types with `Option`al attributes:                                          │\n│ 5│                                                                                               │\n│ 6│ let style = Style::default().red().on_green().bold().reset_blink();                           │\n│ 7│ assert_eq!(style.get_foreground(), Some(Foreground(Red)));                                    │\n│ 8│ assert_eq!(style.get_background(), Some(Background(Green)));                                  │\n│ 9│ assert_eq!(style.get_weight(), Some(Bold));                                                   │\n│10│ assert_eq!(style.get_blink(), Some(ResetBlink));                                              │\n│11│ assert_eq!(style.get_slant(), None);                                                          │\n│12│                                                                                               │\n│13│ // It also provides convenients methods for styles manipulation:                              │\n│14│ // `and` (`Option::and` fields), `or` (`Option::or` fields), `xor`                            │\n│15│ // (`Option::xor` fields), `dedup` (`None`s when identical                                    │\n│16│ // fields), `reset` (reset `Some` fields).                                                    │\n└──┴───────────────────────────────────────────────────────────────────────────────────────────────┘" ;
