macro_rules! ident {
    ($fmt:literal $(, $($rest:tt)*)?) => { ::quote::format_ident!($fmt $(, $($rest)*)?) };
    ($($ident:ident = ($fmt:literal, $expr:expr),)*) => {
        $(#[allow(non_snake_case)] let $ident = ident!($fmt, $expr);)*
    };
    ($($ident:ident = $expr:expr,)*) => {
        $(#[allow(non_snake_case)] let $ident = ident!("{}", $expr);)*
    };
}

macro_rules! quote {
    ($($ident:ident = $($args:expr)+,)* { $($tt:tt)* }) => {{
        ident!($($ident = $($args)+,)*);
        {::quote::quote! { $($tt)* }}.to_string()
    }};
}

macro_rules! doc {
    ($($arg:tt)+) => {
        format!($($arg)+).lines().map(str::to_string).collect::<Vec<_>>();
    };
}

#[macro_use]
mod lay;

mod style;
mod write;

use lay::*;
use write::*;

const HEADER: &str = "
    ////////////////////////////////////////////////////////////////////////////////
    // ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ This file is @generated by build script. ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ //
    // ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§           â›” DO NOT MODIFY! â›”           ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ //
    ////////////////////////////////////////////////////////////////////////////////
";

const HEADER_PART: &str = "
    // ğŸš¨ @generated by build script. ğŸš¨ //
    // ğŸš§     â›” DO NOT MODIFY! â›”    ğŸš§ //
";

const TAG_START: &str = "\n// @generate: ";
const TAG_END: &str = "\n// /@generate: ";

const LINE_BREAK: &str = "__LINE_BREAK__";

const LAY: Lay = lay!(
    ("Reset" "No")
    "Color": ["White" "Black"] ("Rgb" "Ansi")
    "Dark": ["Grey" "Red" "Green" "Yellow" "Blue" "Magenta" "Cyan"]
    ["Fg"/"Foreground" "Bg"/"Background"]
    "Wgt"/"Weight":    ["Bold" "Light"]
    "Slt"/"Slant":     ["Italic"]
    "Udl"/"Underline": ["Underlined"]
    "Str"/"Strike":    ["Striked"]
    "Ovl"/"Overline":  ["Ovelined"]
    "Inv"/"Invert":    ["Inverted"]
    "Blk"/"Blink":     ["Slow" "Fast"]
    "Brd"/"Border":    ["Circle" "Frame"]
);

pub fn generate() {
    if let Ok(profile) = std::env::var("PROFILE") {
        if profile == "debug" {
            // panic!("{:#?}", LAY);
            println!("cargo:rerun-if-changed=build/mod.rs");

            write_part("style/mod.rs", "import_markers", LAY.import_markers());
            write("style/color.rs", LAY.color());
            write("style/reset.rs", LAY.reset());
            write("style/i.rs", LAY.i());
            write("style/no.rs", LAY.no());
            write("style/attributes/mod.rs", LAY.mod_style_attributes());
            write("style/attributes/foreground.rs", LAY.foreground());
            write("style/attributes/background.rs", LAY.background());
            write("style/styler/mod.rs", LAY.mod_styler_styler());
            write("style/styler/styler_index.rs", LAY.styler_index());

            for (name, content) in LAY.attributes() {
                write(&format!("style/attributes/{}.rs", name), content);
            }

            // panic!(); // To show println calls...
        }
    }
}
