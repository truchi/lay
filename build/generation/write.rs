use super::*;
use std::{
    env::var,
    fs::{create_dir_all, read, File},
    io::Write,
    path::{Path, PathBuf},
    process::Command,
    str::from_utf8,
};

pub const LINE_BREAK: &str = "__LINE_BREAK__";

const HEADER: &str = "
    ////////////////////////////////////////////////////////////////////////////////
    // ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
    // ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
    ////////////////////////////////////////////////////////////////////////////////
";

const HEADER_PART: &str = "
    // ðŸš¨ @generated by build script. ðŸš¨ //
    // ðŸš§     â›” DO NOT MODIFY! â›”    ðŸš§ //
";

const TAG_START: &str = "\n// @generate: ";
const TAG_END: &str = "\n// /@generate: ";

pub fn write(path: &str, content: TokenStream) {
    let content = format!("{}\n\n{}", HEADER, pre(content));
    let path = make_dir(path);

    File::create(&path)
        .expect(&format!("Cannot create file: {:?}", path))
        .write_all(content.as_bytes())
        .expect(&format!("Cannot write in file: {:?}", path));

    Command::new("rustfmt")
        .arg(&path)
        .output()
        .expect(&format!("Cannot run rustfmt on file: {:?}", path));
}

pub fn write_part(path: &str, tag: &str, content: TokenStream) {
    let path = make_dir(path);

    let file = read(&path).expect(&format!("Cannot read file: {:?}", path));
    let file = from_utf8(&file).expect(&format!("Invalid UTF-8 in file: {:?}", file));

    let tag_start = TAG_START.to_string() + tag + "\n";
    let tag_end = TAG_END.to_string() + tag + "\n";

    if let Some(start) = file.find(&tag_start) {
        let start = start + tag_start.len();
        if let Some(end) = file.find(&tag_end) {
            let content = format!("{}\n\n{}", HEADER_PART.trim(), pre(content).trim());
            let content = file[..start].to_string() + &content + &file[end..];

            File::create(&path)
                .expect(&format!("Cannot create file: {:?}", path))
                .write_all(content.as_bytes())
                .expect(&format!("Cannot write in file: {:?}", path));

            Command::new("rustfmt")
                .arg(&path)
                .output()
                .expect(&format!("Cannot run rustfmt on file: {:?}", path));
        } else {
            panic!("Missing {:?} in file: {:?}", tag_end, path);
        }
    } else {
        panic!("Missing {:?} in file: {:?}", tag_start, path);
    }
}

fn pre(tokens: TokenStream) -> String {
    let string = tokens
        .to_string()
        .replace(&format!(r#""{}""#, LINE_BREAK), "\n\n");

    Doc::replace(string)
}

fn make_dir(p: &str) -> PathBuf {
    let path =
        var("CARGO_MANIFEST_DIR").expect("Cannot get CARGO_MANIFEST_DIR environment variable");
    let path = path.to_string() + "/src/" + p;
    let path = Path::new(&path);
    let dir = path
        .parent()
        .expect(&format!("Cannot get parent directory of path: {:?}", path));

    create_dir_all(dir).expect(&format!("Cannot create location: {:?}", dir));

    path.to_path_buf()
}
