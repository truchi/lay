////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use super::*;

impl Not for Height {
    type Output = Self;

    fn not(self) -> Self {
        Self { 0: self.0.not() }
    }
}

impl Add for Height {
    type Output = Self;

    fn add(self, rhs: Self) -> Self {
        Self {
            0: self.0.add(rhs.0),
        }
    }
}

impl AddAssign for Height {
    fn add_assign(&mut self, rhs: Self) {
        self.0.add_assign(rhs.0);
    }
}

impl Sub for Height {
    type Output = Self;

    fn sub(self, rhs: Self) -> Self {
        Self {
            0: self.0.sub(rhs.0),
        }
    }
}

impl SubAssign for Height {
    fn sub_assign(&mut self, rhs: Self) {
        self.0.sub_assign(rhs.0);
    }
}

impl Mul for Height {
    type Output = Self;

    fn mul(self, rhs: Self) -> Self {
        Self {
            0: self.0.mul(rhs.0),
        }
    }
}

impl MulAssign for Height {
    fn mul_assign(&mut self, rhs: Self) {
        self.0.mul_assign(rhs.0);
    }
}

impl Div for Height {
    type Output = Self;

    fn div(self, rhs: Self) -> Self {
        Self {
            0: self.0.div(rhs.0),
        }
    }
}

impl DivAssign for Height {
    fn div_assign(&mut self, rhs: Self) {
        self.0.div_assign(rhs.0);
    }
}

impl Rem for Height {
    type Output = Self;

    fn rem(self, rhs: Self) -> Self {
        Self {
            0: self.0.rem(rhs.0),
        }
    }
}

impl RemAssign for Height {
    fn rem_assign(&mut self, rhs: Self) {
        self.0.rem_assign(rhs.0);
    }
}

impl Shl for Height {
    type Output = Self;

    fn shl(self, rhs: Self) -> Self {
        Self {
            0: self.0.shl(rhs.0),
        }
    }
}

impl ShlAssign for Height {
    fn shl_assign(&mut self, rhs: Self) {
        self.0.shl_assign(rhs.0);
    }
}

impl Shr for Height {
    type Output = Self;

    fn shr(self, rhs: Self) -> Self {
        Self {
            0: self.0.shr(rhs.0),
        }
    }
}

impl ShrAssign for Height {
    fn shr_assign(&mut self, rhs: Self) {
        self.0.shr_assign(rhs.0);
    }
}

impl BitAnd for Height {
    type Output = Self;

    fn bitand(self, rhs: Self) -> Self {
        Self {
            0: self.0.bitand(rhs.0),
        }
    }
}

impl BitAndAssign for Height {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0);
    }
}

impl BitOr for Height {
    type Output = Self;

    fn bitor(self, rhs: Self) -> Self {
        Self {
            0: self.0.bitor(rhs.0),
        }
    }
}

impl BitOrAssign for Height {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0);
    }
}

impl BitXor for Height {
    type Output = Self;

    fn bitxor(self, rhs: Self) -> Self {
        Self {
            0: self.0.bitxor(rhs.0),
        }
    }
}

impl BitXorAssign for Height {
    fn bitxor_assign(&mut self, rhs: Self) {
        self.0.bitxor_assign(rhs.0);
    }
}
