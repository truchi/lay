////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use super::*;

impl Not for Rect {
    type Output = Self;

    fn not(self) -> Self {
        Self {
            point: self.point.not(),
            size:  self.size.not(),
        }
    }
}

impl Add for Rect {
    type Output = Self;

    fn add(self, rhs: Self) -> Self {
        Self {
            point: self.point.add(rhs.point),
            size:  self.size.add(rhs.size),
        }
    }
}

impl AddAssign for Rect {
    fn add_assign(&mut self, rhs: Self) {
        self.point.add_assign(rhs.point);
        self.size.add_assign(rhs.size);
    }
}

impl Sub for Rect {
    type Output = Self;

    fn sub(self, rhs: Self) -> Self {
        Self {
            point: self.point.sub(rhs.point),
            size:  self.size.sub(rhs.size),
        }
    }
}

impl SubAssign for Rect {
    fn sub_assign(&mut self, rhs: Self) {
        self.point.sub_assign(rhs.point);
        self.size.sub_assign(rhs.size);
    }
}

impl Mul for Rect {
    type Output = Self;

    fn mul(self, rhs: Self) -> Self {
        Self {
            point: self.point.mul(rhs.point),
            size:  self.size.mul(rhs.size),
        }
    }
}

impl MulAssign for Rect {
    fn mul_assign(&mut self, rhs: Self) {
        self.point.mul_assign(rhs.point);
        self.size.mul_assign(rhs.size);
    }
}

impl Div for Rect {
    type Output = Self;

    fn div(self, rhs: Self) -> Self {
        Self {
            point: self.point.div(rhs.point),
            size:  self.size.div(rhs.size),
        }
    }
}

impl DivAssign for Rect {
    fn div_assign(&mut self, rhs: Self) {
        self.point.div_assign(rhs.point);
        self.size.div_assign(rhs.size);
    }
}

impl Rem for Rect {
    type Output = Self;

    fn rem(self, rhs: Self) -> Self {
        Self {
            point: self.point.rem(rhs.point),
            size:  self.size.rem(rhs.size),
        }
    }
}

impl RemAssign for Rect {
    fn rem_assign(&mut self, rhs: Self) {
        self.point.rem_assign(rhs.point);
        self.size.rem_assign(rhs.size);
    }
}

impl Shl for Rect {
    type Output = Self;

    fn shl(self, rhs: Self) -> Self {
        Self {
            point: self.point.shl(rhs.point),
            size:  self.size.shl(rhs.size),
        }
    }
}

impl ShlAssign for Rect {
    fn shl_assign(&mut self, rhs: Self) {
        self.point.shl_assign(rhs.point);
        self.size.shl_assign(rhs.size);
    }
}

impl Shr for Rect {
    type Output = Self;

    fn shr(self, rhs: Self) -> Self {
        Self {
            point: self.point.shr(rhs.point),
            size:  self.size.shr(rhs.size),
        }
    }
}

impl ShrAssign for Rect {
    fn shr_assign(&mut self, rhs: Self) {
        self.point.shr_assign(rhs.point);
        self.size.shr_assign(rhs.size);
    }
}

impl BitAnd for Rect {
    type Output = Self;

    fn bitand(self, rhs: Self) -> Self {
        Self {
            point: self.point.bitand(rhs.point),
            size:  self.size.bitand(rhs.size),
        }
    }
}

impl BitAndAssign for Rect {
    fn bitand_assign(&mut self, rhs: Self) {
        self.point.bitand_assign(rhs.point);
        self.size.bitand_assign(rhs.size);
    }
}

impl BitOr for Rect {
    type Output = Self;

    fn bitor(self, rhs: Self) -> Self {
        Self {
            point: self.point.bitor(rhs.point),
            size:  self.size.bitor(rhs.size),
        }
    }
}

impl BitOrAssign for Rect {
    fn bitor_assign(&mut self, rhs: Self) {
        self.point.bitor_assign(rhs.point);
        self.size.bitor_assign(rhs.size);
    }
}

impl BitXor for Rect {
    type Output = Self;

    fn bitxor(self, rhs: Self) -> Self {
        Self {
            point: self.point.bitxor(rhs.point),
            size:  self.size.bitxor(rhs.size),
        }
    }
}

impl BitXorAssign for Rect {
    fn bitxor_assign(&mut self, rhs: Self) {
        self.point.bitxor_assign(rhs.point);
        self.size.bitxor_assign(rhs.size);
    }
}
