////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use super::*;

impl Not for Size {
    type Output = Self;

    fn not(self) -> Self {
        Self {
            width:  self.width.not(),
            height: self.height.not(),
        }
    }
}

impl Add for Size {
    type Output = Self;

    fn add(self, rhs: Self) -> Self {
        Self {
            width:  self.width.add(rhs.width),
            height: self.height.add(rhs.height),
        }
    }
}

impl AddAssign for Size {
    fn add_assign(&mut self, rhs: Self) {
        self.width.add_assign(rhs.width);
        self.height.add_assign(rhs.height);
    }
}

impl Sub for Size {
    type Output = Self;

    fn sub(self, rhs: Self) -> Self {
        Self {
            width:  self.width.sub(rhs.width),
            height: self.height.sub(rhs.height),
        }
    }
}

impl SubAssign for Size {
    fn sub_assign(&mut self, rhs: Self) {
        self.width.sub_assign(rhs.width);
        self.height.sub_assign(rhs.height);
    }
}

impl Mul for Size {
    type Output = Self;

    fn mul(self, rhs: Self) -> Self {
        Self {
            width:  self.width.mul(rhs.width),
            height: self.height.mul(rhs.height),
        }
    }
}

impl MulAssign for Size {
    fn mul_assign(&mut self, rhs: Self) {
        self.width.mul_assign(rhs.width);
        self.height.mul_assign(rhs.height);
    }
}

impl Div for Size {
    type Output = Self;

    fn div(self, rhs: Self) -> Self {
        Self {
            width:  self.width.div(rhs.width),
            height: self.height.div(rhs.height),
        }
    }
}

impl DivAssign for Size {
    fn div_assign(&mut self, rhs: Self) {
        self.width.div_assign(rhs.width);
        self.height.div_assign(rhs.height);
    }
}

impl Rem for Size {
    type Output = Self;

    fn rem(self, rhs: Self) -> Self {
        Self {
            width:  self.width.rem(rhs.width),
            height: self.height.rem(rhs.height),
        }
    }
}

impl RemAssign for Size {
    fn rem_assign(&mut self, rhs: Self) {
        self.width.rem_assign(rhs.width);
        self.height.rem_assign(rhs.height);
    }
}

impl Shl for Size {
    type Output = Self;

    fn shl(self, rhs: Self) -> Self {
        Self {
            width:  self.width.shl(rhs.width),
            height: self.height.shl(rhs.height),
        }
    }
}

impl ShlAssign for Size {
    fn shl_assign(&mut self, rhs: Self) {
        self.width.shl_assign(rhs.width);
        self.height.shl_assign(rhs.height);
    }
}

impl Shr for Size {
    type Output = Self;

    fn shr(self, rhs: Self) -> Self {
        Self {
            width:  self.width.shr(rhs.width),
            height: self.height.shr(rhs.height),
        }
    }
}

impl ShrAssign for Size {
    fn shr_assign(&mut self, rhs: Self) {
        self.width.shr_assign(rhs.width);
        self.height.shr_assign(rhs.height);
    }
}

impl BitAnd for Size {
    type Output = Self;

    fn bitand(self, rhs: Self) -> Self {
        Self {
            width:  self.width.bitand(rhs.width),
            height: self.height.bitand(rhs.height),
        }
    }
}

impl BitAndAssign for Size {
    fn bitand_assign(&mut self, rhs: Self) {
        self.width.bitand_assign(rhs.width);
        self.height.bitand_assign(rhs.height);
    }
}

impl BitOr for Size {
    type Output = Self;

    fn bitor(self, rhs: Self) -> Self {
        Self {
            width:  self.width.bitor(rhs.width),
            height: self.height.bitor(rhs.height),
        }
    }
}

impl BitOrAssign for Size {
    fn bitor_assign(&mut self, rhs: Self) {
        self.width.bitor_assign(rhs.width);
        self.height.bitor_assign(rhs.height);
    }
}

impl BitXor for Size {
    type Output = Self;

    fn bitxor(self, rhs: Self) -> Self {
        Self {
            width:  self.width.bitxor(rhs.width),
            height: self.height.bitxor(rhs.height),
        }
    }
}

impl BitXorAssign for Size {
    fn bitxor_assign(&mut self, rhs: Self) {
        self.width.bitxor_assign(rhs.width);
        self.height.bitxor_assign(rhs.height);
    }
}
