////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use crate::*;

/// A trait for getting `Option`al attributes on styled types.
pub trait StylerIndex {
    /// Gets `Option<Foreground>`.
    fn get_foreground(&self) -> Option<Foreground>;

    /// Gets `Option<Background>`.
    fn get_background(&self) -> Option<Background>;

    /// Gets `Option<Weight>`.
    fn get_weight(&self) -> Option<Weight>;

    /// Gets `Option<Slant>`.
    fn get_slant(&self) -> Option<Slant>;

    /// Gets `Option<Underline>`.
    fn get_underline(&self) -> Option<Underline>;

    /// Gets `Option<Strike>`.
    fn get_strike(&self) -> Option<Strike>;

    /// Gets `Option<Overline>`.
    fn get_overline(&self) -> Option<Overline>;

    /// Gets `Option<Invert>`.
    fn get_invert(&self) -> Option<Invert>;

    /// Gets `Option<Blink>`.
    fn get_blink(&self) -> Option<Blink>;

    /// Gets `Option<Border>`.
    fn get_border(&self) -> Option<Border>;

    /// Returns a `Style`.
    fn style(&self) -> Style {
        Style {
            foreground: self.get_foreground(),
            background: self.get_background(),
            weight:     self.get_weight(),
            slant:      self.get_slant(),
            underline:  self.get_underline(),
            strike:     self.get_strike(),
            overline:   self.get_overline(),
            invert:     self.get_invert(),
            blink:      self.get_blink(),
            border:     self.get_border(),
        }
    }
}

/// A trait for getting `Option`al attributes on mutable styled types.
pub trait StylerIndexMut {
    /// Gets `&mut Option<Foreground>`.
    fn get_foreground(&mut self) -> &mut Option<Foreground>;

    /// Gets `&mut Option<Background>`.
    fn get_background(&mut self) -> &mut Option<Background>;

    /// Gets `&mut Option<Weight>`.
    fn get_weight(&mut self) -> &mut Option<Weight>;

    /// Gets `&mut Option<Slant>`.
    fn get_slant(&mut self) -> &mut Option<Slant>;

    /// Gets `&mut Option<Underline>`.
    fn get_underline(&mut self) -> &mut Option<Underline>;

    /// Gets `&mut Option<Strike>`.
    fn get_strike(&mut self) -> &mut Option<Strike>;

    /// Gets `&mut Option<Overline>`.
    fn get_overline(&mut self) -> &mut Option<Overline>;

    /// Gets `&mut Option<Invert>`.
    fn get_invert(&mut self) -> &mut Option<Invert>;

    /// Gets `&mut Option<Blink>`.
    fn get_blink(&mut self) -> &mut Option<Blink>;

    /// Gets `&mut Option<Border>`.
    fn get_border(&mut self) -> &mut Option<Border>;
}

/// A trait for setting `Option`al attributes on styled types.
pub trait Styler: StylerIndex + Sized {
    /// The resulting type of the setters.
    type Output;

    /// Sets `Option<Foreground>`.
    fn foreground(self, foreground: impl Into<Option<Foreground>>) -> Self;

    fn white(self) -> Self;

    fn black(self) -> Self;

    fn grey(self) -> Self;

    fn dark_grey(self) -> Self;

    fn red(self) -> Self;

    fn dark_red(self) -> Self;

    fn green(self) -> Self;

    fn dark_green(self) -> Self;

    fn yellow(self) -> Self;

    fn dark_yellow(self) -> Self;

    fn blue(self) -> Self;

    fn dark_blue(self) -> Self;

    fn magenta(self) -> Self;

    fn dark_magenta(self) -> Self;

    fn cyan(self) -> Self;

    fn dark_cyan(self) -> Self;

    fn rgb(self, r: u8, g: u8, b: u8) -> Self;

    fn ansi(self, ansi: u8) -> Self;

    fn reset_color(self) -> Self;

    /// `None`s `Option<Foreground>`.
    fn no_foreground(self) -> Self {
        self.foreground(None)
    }

    /// Sets `Option<Background>`.
    fn background(self, background: impl Into<Option<Background>>) -> Self;

    fn on_white(self) -> Self;

    fn on_black(self) -> Self;

    fn on_grey(self) -> Self;

    fn on_dark_grey(self) -> Self;

    fn on_red(self) -> Self;

    fn on_dark_red(self) -> Self;

    fn on_green(self) -> Self;

    fn on_dark_green(self) -> Self;

    fn on_yellow(self) -> Self;

    fn on_dark_yellow(self) -> Self;

    fn on_blue(self) -> Self;

    fn on_dark_blue(self) -> Self;

    fn on_magenta(self) -> Self;

    fn on_dark_magenta(self) -> Self;

    fn on_cyan(self) -> Self;

    fn on_dark_cyan(self) -> Self;

    fn on_rgb(self, r: u8, g: u8, b: u8) -> Self;

    fn on_ansi(self, ansi: u8) -> Self;

    fn on_reset_color(self) -> Self;

    /// `None`s `Option<Background>`.
    fn no_background(self) -> Self {
        self.background(None)
    }

    /// Sets `Option<Weight>`.
    fn weight(self, weight: impl Into<Option<Weight>>) -> Self;

    fn bold(self) -> Self;

    fn light(self) -> Self;

    fn reset_weight(self) -> Self;

    /// `None`s `Option<Weight>`.
    fn no_weight(self) -> Self {
        self.weight(None)
    }

    /// Sets `Option<Slant>`.
    fn slant(self, slant: impl Into<Option<Slant>>) -> Self;

    fn italic(self) -> Self;

    fn reset_slant(self) -> Self;

    /// `None`s `Option<Slant>`.
    fn no_slant(self) -> Self {
        self.slant(None)
    }

    /// Sets `Option<Underline>`.
    fn underline(self, underline: impl Into<Option<Underline>>) -> Self;

    fn underlined(self) -> Self;

    fn reset_underline(self) -> Self;

    /// `None`s `Option<Underline>`.
    fn no_underline(self) -> Self {
        self.underline(None)
    }

    /// Sets `Option<Strike>`.
    fn strike(self, strike: impl Into<Option<Strike>>) -> Self;

    fn striked(self) -> Self;

    fn reset_strike(self) -> Self;

    /// `None`s `Option<Strike>`.
    fn no_strike(self) -> Self {
        self.strike(None)
    }

    /// Sets `Option<Overline>`.
    fn overline(self, overline: impl Into<Option<Overline>>) -> Self;

    fn ovelined(self) -> Self;

    fn reset_overline(self) -> Self;

    /// `None`s `Option<Overline>`.
    fn no_overline(self) -> Self {
        self.overline(None)
    }

    /// Sets `Option<Invert>`.
    fn invert(self, invert: impl Into<Option<Invert>>) -> Self;

    fn inverted(self) -> Self;

    fn reset_invert(self) -> Self;

    /// `None`s `Option<Invert>`.
    fn no_invert(self) -> Self {
        self.invert(None)
    }

    /// Sets `Option<Blink>`.
    fn blink(self, blink: impl Into<Option<Blink>>) -> Self;

    fn slow(self) -> Self;

    fn fast(self) -> Self;

    fn reset_blink(self) -> Self;

    /// `None`s `Option<Blink>`.
    fn no_blink(self) -> Self {
        self.blink(None)
    }

    /// Sets `Option<Border>`.
    fn border(self, border: impl Into<Option<Border>>) -> Self;

    fn circle(self) -> Self;

    fn frame(self) -> Self;

    fn reset_border(self) -> Self;

    /// `None`s `Option<Border>`.
    fn no_border(self) -> Self {
        self.border(None)
    }
}
