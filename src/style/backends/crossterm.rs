////////////////////////////////////////////////////////////////////////////////
// ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ This file is @generated by build script. ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ //
// ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§           â›” DO NOT MODIFY! â›”           ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ğŸš§ //
////////////////////////////////////////////////////////////////////////////////

use crate::*;
use std::fmt::{Display, Error, Formatter};

// ========================================================================== //
// ========================================================================== //
// Conversions                                                                //
// ========================================================================== //
// ========================================================================== //

/// Converts to `crossterm::style::Color`.
impl From<Color> for crossterm::style::Color {
    /// Converts to `crossterm::style::Color`.
    fn from(color: Color) -> Self {
        match color {
            Color::White => Self::White,
            Color::Black => Self::Black,
            Color::Grey => Self::Grey,
            Color::DarkGrey => Self::DarkGrey,
            Color::Red => Self::Red,
            Color::DarkRed => Self::DarkRed,
            Color::Green => Self::Green,
            Color::DarkGreen => Self::DarkGreen,
            Color::Yellow => Self::Yellow,
            Color::DarkYellow => Self::DarkYellow,
            Color::Blue => Self::Blue,
            Color::DarkBlue => Self::DarkBlue,
            Color::Magenta => Self::Magenta,
            Color::DarkMagenta => Self::DarkMagenta,
            Color::Cyan => Self::Cyan,
            Color::DarkCyan => Self::DarkCyan,
            Color::Rgb(r, g, b) => Self::Rgb { r, g, b },
            Color::Ansi(ansi) => Self::AnsiValue(ansi),
            Color::ResetColor => Self::Reset,
        }
    }
}

/// Converts `Weight` to `crossterm::style::Attribute`.
impl From<Weight> for crossterm::style::Attribute {
    /// Converts `Weight` to `crossterm::style::Attribute`.
    fn from(weight: Weight) -> Self {
        match weight {
            Weight::Bold => Self::Bold,
            Weight::Light => Self::Dim,
            Weight::ResetWeight => Self::NormalIntensity,
        }
    }
}

/// Converts `Slant` to `crossterm::style::Attribute`.
impl From<Slant> for crossterm::style::Attribute {
    /// Converts `Slant` to `crossterm::style::Attribute`.
    fn from(slant: Slant) -> Self {
        match slant {
            Slant::Italic => Self::Italic,
            Slant::ResetSlant => Self::NoItalic,
        }
    }
}

/// Converts `Underline` to `crossterm::style::Attribute`.
impl From<Underline> for crossterm::style::Attribute {
    /// Converts `Underline` to `crossterm::style::Attribute`.
    fn from(underline: Underline) -> Self {
        match underline {
            Underline::Underlined => Self::Underlined,
            Underline::ResetUnderline => Self::NoUnderline,
        }
    }
}

/// Converts `Strike` to `crossterm::style::Attribute`.
impl From<Strike> for crossterm::style::Attribute {
    /// Converts `Strike` to `crossterm::style::Attribute`.
    fn from(strike: Strike) -> Self {
        match strike {
            Strike::Striked => Self::CrossedOut,
            Strike::ResetStrike => Self::NotCrossedOut,
        }
    }
}

/// Converts `Overline` to `crossterm::style::Attribute`.
impl From<Overline> for crossterm::style::Attribute {
    /// Converts `Overline` to `crossterm::style::Attribute`.
    fn from(overline: Overline) -> Self {
        match overline {
            Overline::Overlined => Self::OverLined,
            Overline::ResetOverline => Self::NotOverLined,
        }
    }
}

/// Converts `Invert` to `crossterm::style::Attribute`.
impl From<Invert> for crossterm::style::Attribute {
    /// Converts `Invert` to `crossterm::style::Attribute`.
    fn from(invert: Invert) -> Self {
        match invert {
            Invert::Inverted => Self::Reverse,
            Invert::ResetInvert => Self::NoReverse,
        }
    }
}

/// Converts `Blink` to `crossterm::style::Attribute`.
impl From<Blink> for crossterm::style::Attribute {
    /// Converts `Blink` to `crossterm::style::Attribute`.
    fn from(blink: Blink) -> Self {
        match blink {
            Blink::Slow => Self::SlowBlink,
            Blink::Fast => Self::RapidBlink,
            Blink::ResetBlink => Self::NoBlink,
        }
    }
}

/// Converts `Border` to `crossterm::style::Attribute`.
impl From<Border> for crossterm::style::Attribute {
    /// Converts `Border` to `crossterm::style::Attribute`.
    fn from(border: Border) -> Self {
        match border {
            Border::Circle => Self::Encircled,
            Border::Frame => Self::Framed,
            Border::ResetBorder => Self::NotFramedOrEncircled,
        }
    }
}

// ========================================================================== //
// ========================================================================== //
// Displays                                                                   //
// ========================================================================== //
// ========================================================================== //

/// `Display`s `Foreground` with `crossterm`.
impl Display for Foreground {
    /// `Display`s `Foreground` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetForegroundColor as Display>::fmt(
            &crossterm::style::SetForegroundColor(self.0.into()),
            f,
        )
    }
}

/// `Display`s `Background` with `crossterm`.
impl Display for Background {
    /// `Display`s `Background` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetBackgroundColor as Display>::fmt(
            &crossterm::style::SetBackgroundColor(self.0.into()),
            f,
        )
    }
}

/// `Display`s `Weight` with `crossterm`.
impl Display for Weight {
    /// `Display`s `Weight` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Slant` with `crossterm`.
impl Display for Slant {
    /// `Display`s `Slant` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Underline` with `crossterm`.
impl Display for Underline {
    /// `Display`s `Underline` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Strike` with `crossterm`.
impl Display for Strike {
    /// `Display`s `Strike` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Overline` with `crossterm`.
impl Display for Overline {
    /// `Display`s `Overline` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Invert` with `crossterm`.
impl Display for Invert {
    /// `Display`s `Invert` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Blink` with `crossterm`.
impl Display for Blink {
    /// `Display`s `Blink` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}

/// `Display`s `Border` with `crossterm`.
impl Display for Border {
    /// `Display`s `Border` with `crossterm`.
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        <crossterm::style::SetAttribute as Display>::fmt(
            &crossterm::style::SetAttribute((*self).into()),
            f,
        )
    }
}
