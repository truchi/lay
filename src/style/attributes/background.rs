////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use crate::*;

/// A `Background` `Color`.
///
/// Prints the corresponding CSI to the terminal when `Display`ed.
/// `Default`s to `Background(Color::ResetColor)`, user's default terminal's
/// background color.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]
pub struct Background(pub Color);

/// `Default`s to `Background(Color::ResetColor)`.
impl Default for Background {
    /// `Default`s to `Background(Color::ResetColor)`.
    fn default() -> Self {
        Self(Color::ResetColor)
    }
}

/// Returns `Background(color)`.
impl From<Color> for Background {
    /// Returns `Background(color)`.
    fn from(color: Color) -> Self {
        Self(color)
    }
}

/// Returns `Some(Background(color))`.
impl From<Color> for Option<Background> {
    /// Returns `Some(Background(color))`.
    fn from(color: Color) -> Self {
        Some(Background(color))
    }
}
