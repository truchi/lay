////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use crate::*;

/// `Style`s.
///
/// A straightforward implementation of `Styler`.
///
/// `Display`s the corresponding CSIs to the terminal.
///
/// `Default`s as an empty `Style` (all fields set to `None`).
#[derive(Copy, Clone, Eq, PartialEq, Default, Debug)]
pub struct Style {
    pub foreground: Option<Foreground>,
    pub background: Option<Background>,
    pub weight:     Option<Weight>,
    pub slant:      Option<Slant>,
    pub underline:  Option<Underline>,
    pub strike:     Option<Strike>,
    pub overline:   Option<Overline>,
    pub invert:     Option<Invert>,
    pub blink:      Option<Blink>,
    pub border:     Option<Border>,
}

impl Style {
    /// A `Style` with fields set to `None`.
    pub const NONE: Self = Self {
        foreground: None,
        background: None,
        weight:     None,
        slant:      None,
        underline:  None,
        strike:     None,
        overline:   None,
        invert:     None,
        blink:      None,
        border:     None,
    };
    /// A `Style` with fields set to their reset value.
    pub const RESET: Self = Self {
        foreground: Some(Foreground(Color::ResetColor)),
        background: Some(Background(Color::ResetColor)),
        weight:     Some(Weight::ResetWeight),
        slant:      Some(Slant::ResetSlant),
        underline:  Some(Underline::ResetUnderline),
        strike:     Some(Strike::ResetStrike),
        overline:   Some(Overline::ResetOverline),
        invert:     Some(Invert::ResetInvert),
        blink:      Some(Blink::ResetBlink),
        border:     Some(Border::ResetBorder),
    };
}

/// Returns an empty `Style` with `Some(foreground)`.
impl From<Foreground> for Style {
    /// Returns an empty `Style` with `Some(foreground)`.
    fn from(foreground: Foreground) -> Self {
        Self {
            foreground: Some(foreground),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(background)`.
impl From<Background> for Style {
    /// Returns an empty `Style` with `Some(background)`.
    fn from(background: Background) -> Self {
        Self {
            foreground: None,
            background: Some(background),
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(weight)`.
impl From<Weight> for Style {
    /// Returns an empty `Style` with `Some(weight)`.
    fn from(weight: Weight) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     Some(weight),
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(slant)`.
impl From<Slant> for Style {
    /// Returns an empty `Style` with `Some(slant)`.
    fn from(slant: Slant) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      Some(slant),
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(underline)`.
impl From<Underline> for Style {
    /// Returns an empty `Style` with `Some(underline)`.
    fn from(underline: Underline) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      None,
            underline:  Some(underline),
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(strike)`.
impl From<Strike> for Style {
    /// Returns an empty `Style` with `Some(strike)`.
    fn from(strike: Strike) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     Some(strike),
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(overline)`.
impl From<Overline> for Style {
    /// Returns an empty `Style` with `Some(overline)`.
    fn from(overline: Overline) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   Some(overline),
            invert:     None,
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(invert)`.
impl From<Invert> for Style {
    /// Returns an empty `Style` with `Some(invert)`.
    fn from(invert: Invert) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     Some(invert),
            blink:      None,
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(blink)`.
impl From<Blink> for Style {
    /// Returns an empty `Style` with `Some(blink)`.
    fn from(blink: Blink) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      Some(blink),
            border:     None,
        }
    }
}

/// Returns an empty `Style` with `Some(border)`.
impl From<Border> for Style {
    /// Returns an empty `Style` with `Some(border)`.
    fn from(border: Border) -> Self {
        Self {
            foreground: None,
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     Some(border),
        }
    }
}
