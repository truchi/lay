////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use crate::*;
pub use Overline::*;

/// [`Overline`](crate::Overline) (`Overlined`, `ResetOverline`).
///
/// Prints the corresponding CSI to the terminal when `Display`ed.
///
/// `Default`s to `Overline::ResetOverline`, the unsetting CSI.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]
pub enum Overline {
    Overlined,
    ResetOverline,
}

/// Returns `Overline::ResetOverline`.
impl Default for Overline {
    /// Returns `Overline::ResetOverline`.
    fn default() -> Self {
        Overline::ResetOverline
    }
}

impl StylerIndex for Overline {
    /// Returns `None`.
    fn get_foreground(&self) -> Option<Foreground> {
        None
    }

    /// Returns `None`.
    fn get_background(&self) -> Option<Background> {
        None
    }

    /// Returns `None`.
    fn get_weight(&self) -> Option<Weight> {
        None
    }

    /// Returns `None`.
    fn get_slant(&self) -> Option<Slant> {
        None
    }

    /// Returns `None`.
    fn get_underline(&self) -> Option<Underline> {
        None
    }

    /// Returns `None`.
    fn get_strike(&self) -> Option<Strike> {
        None
    }

    /// Returns `Some(self)`.
    fn get_overline(&self) -> Option<Overline> {
        Some(*self)
    }

    /// Returns `None`.
    fn get_invert(&self) -> Option<Invert> {
        None
    }

    /// Returns `None`.
    fn get_blink(&self) -> Option<Blink> {
        None
    }

    /// Returns `None`.
    fn get_border(&self) -> Option<Border> {
        None
    }
}

impl Styler for Overline {
    type Output = Style;

    /// Returns a `Style` with `overline` (self) and `foreground`.
    fn foreground(self, foreground: impl Into<Option<Foreground>>) -> Self::Output {
        Style {
            overline: Some(self),
            foreground: foreground.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `background`.
    fn background(self, background: impl Into<Option<Background>>) -> Self::Output {
        Style {
            overline: Some(self),
            background: background.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `weight`.
    fn weight(self, weight: impl Into<Option<Weight>>) -> Self::Output {
        Style {
            overline: Some(self),
            weight: weight.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `slant`.
    fn slant(self, slant: impl Into<Option<Slant>>) -> Self::Output {
        Style {
            overline: Some(self),
            slant: slant.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `underline`.
    fn underline(self, underline: impl Into<Option<Underline>>) -> Self::Output {
        Style {
            overline: Some(self),
            underline: underline.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `strike`.
    fn strike(self, strike: impl Into<Option<Strike>>) -> Self::Output {
        Style {
            overline: Some(self),
            strike: strike.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline`.
    fn overline(self, overline: impl Into<Option<Overline>>) -> Self::Output {
        Style {
            overline: overline.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `invert`.
    fn invert(self, invert: impl Into<Option<Invert>>) -> Self::Output {
        Style {
            overline: Some(self),
            invert: invert.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `blink`.
    fn blink(self, blink: impl Into<Option<Blink>>) -> Self::Output {
        Style {
            overline: Some(self),
            blink: blink.into(),
            ..Style::NONE
        }
    }

    /// Returns a `Style` with `overline` (self) and `border`.
    fn border(self, border: impl Into<Option<Border>>) -> Self::Output {
        Style {
            overline: Some(self),
            border: border.into(),
            ..Style::NONE
        }
    }
}
