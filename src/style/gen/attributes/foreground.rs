////////////////////////////////////////////////////////////////////////////////
// ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
// ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
////////////////////////////////////////////////////////////////////////////////

use crate::*;

/// A [`Foreground`](crate::Foreground) [`Color`](crate::Color).
///
/// Prints the corresponding CSI to the terminal when `Display`ed.
///
/// `Default`s to `Foreground(Color::ResetColor)`, user's default terminal's
/// foreground color.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]
pub struct Foreground(pub Color);

/// `Default`s to `Foreground(Color::ResetColor)`.
impl Default for Foreground {
    /// `Default`s to `Foreground(Color::ResetColor)`.
    fn default() -> Self {
        Foreground(Color::ResetColor)
    }
}

/// Returns `Foreground(Color)`.
impl From<Color> for Foreground {
    /// Returns `Foreground(Color)`.
    fn from(color: Color) -> Self {
        Foreground(color)
    }
}

/// Returns `Some(Foreground(Color))`.
impl From<Color> for Option<Foreground> {
    /// Returns `Some(Foreground(Color))`.
    fn from(color: Color) -> Self {
        Some(Foreground(color))
    }
}

impl StylerIndex for Foreground {
    /// Returns `Some(self)`.
    fn get_foreground(&self) -> Option<Foreground> {
        Some(*self)
    }

    /// Returns `None`.
    fn get_background(&self) -> Option<Background> {
        None
    }

    /// Returns `None`.
    fn get_weight(&self) -> Option<Weight> {
        None
    }

    /// Returns `None`.
    fn get_slant(&self) -> Option<Slant> {
        None
    }

    /// Returns `None`.
    fn get_underline(&self) -> Option<Underline> {
        None
    }

    /// Returns `None`.
    fn get_strike(&self) -> Option<Strike> {
        None
    }

    /// Returns `None`.
    fn get_overline(&self) -> Option<Overline> {
        None
    }

    /// Returns `None`.
    fn get_invert(&self) -> Option<Invert> {
        None
    }

    /// Returns `None`.
    fn get_blink(&self) -> Option<Blink> {
        None
    }

    /// Returns `None`.
    fn get_border(&self) -> Option<Border> {
        None
    }
}

impl Styler for Foreground {
    type Output = Style;

    /// Returns a `Style` with `foreground`.
    fn foreground(self, foreground: impl Into<Option<Foreground>>) -> Self::Output {
        Style {
            foreground: foreground.into(),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `background`.
    fn background(self, background: impl Into<Option<Background>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: background.into(),
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `weight`.
    fn weight(self, weight: impl Into<Option<Weight>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     weight.into(),
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `slant`.
    fn slant(self, slant: impl Into<Option<Slant>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      slant.into(),
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `underline`.
    fn underline(self, underline: impl Into<Option<Underline>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      None,
            underline:  underline.into(),
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `strike`.
    fn strike(self, strike: impl Into<Option<Strike>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     strike.into(),
            overline:   None,
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `overline`.
    fn overline(self, overline: impl Into<Option<Overline>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   overline.into(),
            invert:     None,
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `invert`.
    fn invert(self, invert: impl Into<Option<Invert>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     invert.into(),
            blink:      None,
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `blink`.
    fn blink(self, blink: impl Into<Option<Blink>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      blink.into(),
            border:     None,
        }
    }

    /// Returns a `Style` with `foreground` (self) and `border`.
    fn border(self, border: impl Into<Option<Border>>) -> Self::Output {
        Style {
            foreground: Some(self),
            background: None,
            weight:     None,
            slant:      None,
            underline:  None,
            strike:     None,
            overline:   None,
            invert:     None,
            blink:      None,
            border:     border.into(),
        }
    }
}
