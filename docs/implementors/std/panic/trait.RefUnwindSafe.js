(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; RefUnwindSafe for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; RefUnwindSafe for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; RefUnwindSafe for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; RefUnwindSafe for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossterm"] = [{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveTo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveToColumn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveUp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveRight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveDown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveLeft","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SavePosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestorePosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Show","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableBlinking","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisableBlinking","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyModifiers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetColors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colored","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScrollUp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScrollDown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clear","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearType","synthetic":true,"types":[]}];
implementors["difference"] = [{"text":"impl RefUnwindSafe for Changeset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Difference","synthetic":true,"types":[]}];
implementors["lay"] = [{"text":"impl RefUnwindSafe for Foreground","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Background","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Styled&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Slant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Strike","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Overline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Invert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Border","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl RefUnwindSafe for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl RefUnwindSafe for SigId","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()