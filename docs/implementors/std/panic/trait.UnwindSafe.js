(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl UnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; UnwindSafe for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as RefCnt&gt;::Base: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; UnwindSafe for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; UnwindSafe for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; UnwindSafe for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; UnwindSafe for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossterm"] = [{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveTo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveToColumn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveUp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveRight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveDown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveLeft","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SavePosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestorePosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Show","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableBlinking","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableBlinking","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyModifiers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetColors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colored","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollUp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollDown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Clear","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearType","synthetic":true,"types":[]}];
implementors["difference"] = [{"text":"impl UnwindSafe for Changeset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Difference","synthetic":true,"types":[]}];
implementors["lay"] = [{"text":"impl UnwindSafe for Foreground","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Background","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Styled&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Slant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Strike","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Overline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Invert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Border","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl UnwindSafe for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl UnwindSafe for SigId","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()