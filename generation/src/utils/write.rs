use crate::*;
use std::{
    fs::{create_dir_all, File},
    io::{prelude::*, Write},
    path::{Path, PathBuf},
    process::{Command, Stdio},
};

pub const LINE_BREAK: &str = "__LINE_BREAK__";

const HEADER: &str = "
    ////////////////////////////////////////////////////////////////////////////////
    // ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
    // ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
    ////////////////////////////////////////////////////////////////////////////////
";

pub fn write(dir: &str, path: &str, content: TokenStream) {
    let content = format!("{}\n\n{}", HEADER, pre(content));
    let path = make_dir(dir, path);

    File::create(&path)
        .expect(&format!("Cannot create file: {:?}", path))
        .write_all(content.as_bytes())
        .expect(&format!("Cannot write in file: {:?}", path));
}

pub fn pre(tokens: TokenStream) -> String {
    let string = tokens
        .to_string()
        .replace(&format!(r#""{}""#, LINE_BREAK), "\n\n");

    Doc::replace(string)
}

fn make_dir(dir: &str, p: &str) -> PathBuf {
    let path = dir.to_string() + p;
    let path = Path::new(&path);
    let dir = path
        .parent()
        .expect(&format!("Cannot get parent directory of path: {:?}", path));

    create_dir_all(dir).expect(&format!("Cannot create location: {:?}", dir));

    path.to_path_buf()
}

/// Formats with rustfmt without writing to file
pub fn format(unformatted: &str) -> String {
    let fmt = Command::new("rustfmt")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("Cannot spawn rustfmt");

    fmt.stdin
        .unwrap()
        .write_all(unformatted.as_bytes())
        .expect("Cannot write to rustfmt stdin");

    let mut formatted = String::with_capacity(unformatted.len());
    fmt.stdout
        .unwrap()
        .read_to_string(&mut formatted)
        .expect("Cannot read rustfmt stdout");

    formatted
}
