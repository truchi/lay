use crate::*;

pub const LINE_BREAK: &str = "__LINE_BREAK__";
pub const DOUBLE_QUOTE: &str = "__DOUBLE_QUOTE__";

const HEADER: &str = "
    ////////////////////////////////////////////////////////////////////////////////
    // ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ This file is @generated by build script. ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ //
    // ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§           â›” DO NOT MODIFY! â›”           ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ðŸš§ //
    ////////////////////////////////////////////////////////////////////////////////
";

pub fn write(dir: &PathBuf, path: &str, content: impl ToString) {
    let content = format!("{}\n\n{}", HEADER, pre(content));
    let path = make_dir(dir, path);

    File::create(&path)
        .expect(&format!("Cannot create file: {:?}", path))
        .write_all(content.as_bytes())
        .expect(&format!("Cannot write in file: {:?}", path));
}

pub fn pre(tokens: impl ToString) -> String {
    let string = tokens
        .to_string()
        .replace(&format!(r#""{}""#, LINE_BREAK), "\n\n")
        .replace(DOUBLE_QUOTE, r#"""#); // TODO remove?

    Doc::replace(string)
}

fn make_dir(dir: &PathBuf, p: &str) -> PathBuf {
    let path = dir
        .to_str()
        .expect("Cannot convert PathBuf to str")
        .to_string()
        + p;
    let path = Path::new(&path);
    let dir = path
        .parent()
        .expect(&format!("Cannot get parent directory of path: {:?}", path));

    create_dir_all(dir).expect(&format!("Cannot create location: {:?}", dir));

    path.to_path_buf()
}
